(mod (
        ; pre-committing to the target amount and the cach out address through Currying
        ; those will be hashed with the puzzle at the time of the coin creation
        TARGET_AMOUNT
        CACH_OUT_PUZZLE_HASH
        ; below are the solution values that the spender is going to be passing in:
        my_amount ; current amount of the coin that is being spent
        new_amount ; new amount should be greater than the current amount
        my_puzzlehash ; when a coin is spent, it is "destroyed"; we need our own puzzlehash to recreate the coin
     )

    (include condition_codes.clib)

    (defun-inline recreate_self (my_amount new_amount my_puzzlehash)
        ; return list of conditions
        (list
            ; and inside the list we are going to have more lists - usually we return a list of lists
            (list CREATE_COIN my_puzzlehash new_amount)
            (list ASSERT_MY_AMOUNT my_amount) ; secure the coin from malicious changes
            (list ASSERT_MY_PUZZLEHASH my_puzzlehash) ; secure the coin from malicious changes
            (list CREATE_COIN_ANNOUNCEMENT new_amount) ; secure new_amount value
        )
    )

    (defun-inline cash_out (CACH_OUT_PUZZLE_HASH my_amount new_amount my_puzzlehash)
        (list
            (list CREATE_COIN CACH_OUT_PUZZLE_HASH new_amount) ; we are just sending the entire new amount
            (list CREATE_COIN my_puzzlehash 0) ; create the piggybank coin again
            (list ASSERT_MY_AMOUNT my_amount) ; secure the coin from malicious changes
            (list ASSERT_MY_PUZZLEHASH my_puzzlehash) ; secure the coin from malicious changes
            (list CREATE_COIN_ANNOUNCEMENT new_amount) ; secure new_amount value
        )
    )

    ; main
    ; this is a main entry point
    ; we need to check two things:
    ; - new_amount is greater than my_amount
    ; - whether or not we reached the TARGET_AMOUNT
    (if (> new_amount my_amount)
        ; if yes, do stuff
        (if (> new_amount TARGET_AMOUNT)
            ; if yes, do cash out logic
            (cash_out CACH_OUT_PUZZLE_HASH my_amount new_amount my_puzzlehash) ; requires cach out puzzle hash and the other arguments
            ; otherwise, just recreate self since we havn't reach the savings goal
            (recreate_self my_amount new_amount my_puzzlehash) ; pass everything that the spender given to us
        )
        ; otherwise, raise
        (x) ; fail
    )
)